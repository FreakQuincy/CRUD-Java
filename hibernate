@Repository
public class HibernateOwnershipDao implements OwnershipDao {
  /**
	 * {@inheritDoc}
	 */
	public void addOwnership(Ownership ownership) {
		sf.getCurrentSession().save(ownership);
		
	}

	/**
	 * {@inheritDoc}
	 */
	public void updateOwnership(Ownership ownership) {
		sf.getCurrentSession().merge(ownership);
		
	}

	/**
	 * {@inheritDoc}
	 */
	public void deleteOwnership(Ownership ownership) {
		sf.getCurrentSession().delete(ownership);
		
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public Ownership getOwnershipById(int id){
		List<Ownership> ownerships = sf.getCurrentSession().createQuery("from Ownership where id="+id).list();
		if(ownerships.size()>0){
			return ownerships.get(0);
		}
		else{
			return null;
		}
	}

  @SuppressWarnings("unchecked")
	public List<Ownership> searchOwnership(String name, Integer showRecent) {
	    String searchString = "SELECT * FROM ownership o WHERE 1=1 ";

	    if (name != null && !name.isEmpty()) {
	        searchString += "AND o.name LIKE :name ";
	    }

//	    String limit = "";
//		if(showRecent != null && showRecent > 0) {
//			limit += " LIMIT 10";
//		}
	    
	    System.out.println(searchString);
	    Query query = sf.getCurrentSession().createSQLQuery(searchString + " ORDER BY ownership_id DESC").addEntity(Ownership.class);
	    
	    if (name != null && !name.isEmpty()) {
	        query.setParameter("name", "%" + name + "%");
	    }

	    List<Ownership> ownerships = query.list();
	    return ownerships;
	}

	
	@SuppressWarnings("unchecked")
	public List<Ownership> getAllOwnerships(){
		return sf.getCurrentSession().createQuery("from Ownership where isActive = 1 order by id asc").list();
	}
	
	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<Property> getAllPropertyWithNoSchedExceptPropertyId(int propertyId) {

		String query = "select * from property d "
				+ "left join pm_schedule ps on ps.property_id = d.property_id "
				+ "where (ps.pm_schedule_id is null) or d.property_id = "+propertyId
				+" order by d.property_id";

		
		return sf.getCurrentSession().createSQLQuery(query).addEntity(Property.class).list();

	}

}
